{"remainingRequest":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\src\\views\\publish\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\src\\views\\publish\\index.vue","mtime":1607350945838},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCiAgaW1wb3J0IFVwbG9hZENvdmVyIGZyb20gJy4vY29tcG9uZW50cy91cGxvYWQtY292ZXInCiAgaW1wb3J0IHsgZ2V0QXJ0aWNsZUNoYW5uZWxzLCBhZGRBcnRpY2xlLCB1cGRhdGVBcnRpY2xlLCBnZXRBcnRpY2xlIH0gZnJvbSAiQC9hcGkvYXJ0aWNsZSI7CiAgaW1wb3J0IHsKICAgIEVsZW1lbnRUaXB0YXAsCiAgICBEb2MsCiAgICBUZXh0LAogICAgUGFyYWdyYXBoLAogICAgSGVhZGluZywKICAgIEJvbGQsCiAgICBVbmRlcmxpbmUsCiAgICBJdGFsaWMsCiAgICBJbWFnZSwKICAgIFN0cmlrZSwKICAgIExpc3RJdGVtLAogICAgQnVsbGV0TGlzdCwKICAgIE9yZGVyZWRMaXN0LAogICAgVG9kb0l0ZW0sCiAgICBUb2RvTGlzdCwKICAgIEhvcml6b250YWxSdWxlLAogICAgRnVsbHNjcmVlbiwKICAgIFByZXZpZXcsCiAgICBDb2RlQmxvY2ssCiAgICBUZXh0Q29sb3IKICB9IGZyb20gJ2VsZW1lbnQtdGlwdGFwJwogIGltcG9ydCAnZWxlbWVudC10aXB0YXAvbGliL2luZGV4LmNzcycKICBpbXBvcnQgeyB1cGxvYWRJbWFnZSB9IGZyb20gJ0AvYXBpL2ltYWdlJwogIGV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnUHVibGlzaEluZGV4JywKICBwcm9wczoge30sCiAgY29tcG9uZW50czogewogICAgJ2VsLXRpcHRhcCc6IEVsZW1lbnRUaXB0YXAsCiAgICBVcGxvYWRDb3ZlcgogIH0sCiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICBleHRlbnNpb25zOiBbCiAgICAgICAgbmV3IERvYygpLAogICAgICAgIG5ldyBUZXh0KCksCiAgICAgICAgbmV3IFBhcmFncmFwaCgpLAogICAgICAgIG5ldyBIZWFkaW5nKHsgbGV2ZWw6IDMgfSksCiAgICAgICAgbmV3IEJvbGQoeyBidWJibGU6IHRydWUgfSksIC8vIOWcqOawlOazoeiPnOWNleS4rea4suafk+iPnOWNleaMiemSrgogICAgICAgIG5ldyBJbWFnZSh7CiAgICAgICAgICAvLyDpu5jorqTkvJrmiorlm77niYfnlJ/miJAgYmFzZTY0IOWtl+espuS4suWSjOWGheWuueWtmOWCqOWcqOS4gOi1t++8jOWmguaenOmcgOimgeiHquWumuS5ieWbvueJh+S4iuS8oAogICAgICAgICAgdXBsb2FkUmVxdWVzdCAoZmlsZSkgewogICAgICAgICAgICAvLyDlpoLmnpzmjqXlj6PopoHmsYIgQ29udGVudC1UeXBlIOaYryBtdWx0aXBhcnQvZm9ybS1kYXRh77yM5YiZ6K+35rGC5L2T5b+F6aG75L2/55SoIEZvcm1EYXRhCiAgICAgICAgICAgIGNvbnN0IGZkID0gbmV3IEZvcm1EYXRhKCkKICAgICAgICAgICAgZmQuYXBwZW5kKCdpbWFnZScsIGZpbGUpCiAgICAgICAgICAgIC8vIOesrDHkuKogcmV0dXJuIOaYr+i/lOWbniBQcm9taXNlIOWvueixoQogICAgICAgICAgICAvLyDkuLrku4DkuYjvvJ/lm6DkuLogYXhpb3Mg5pys6Lqr5bCx5piv6L+U5ZueIFByb21pc2Ug5a+56LGhCiAgICAgICAgICAgIHJldHVybiB1cGxvYWRJbWFnZShmZCkudGhlbihyZXMgPT4gewogICAgICAgICAgICAgIC8vIOi/meS4qiByZXR1cm4g5piv6L+U5Zue5pyA5ZCO55qE57uT5p6cCiAgICAgICAgICAgICAgcmV0dXJuIHJlcy5kYXRhLmRhdGEudXJsCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9IC8vIOWbvueJh+eahOS4iuS8oOaWueazle+8jOi/lOWbnuS4gOS4qiBQcm9taXNlPHVybD4KICAgICAgICB9KSwKICAgICAgICBuZXcgVW5kZXJsaW5lKCksIC8vIOS4i+WIkue6vwogICAgICAgIG5ldyBJdGFsaWMoKSwgLy8g5pac5L2TCiAgICAgICAgbmV3IFN0cmlrZSgpLCAvLyDliKDpmaTnur8KICAgICAgICBuZXcgSG9yaXpvbnRhbFJ1bGUoKSwgLy8g5Y2O5Li955qE5YiG5Ymy57q/CiAgICAgICAgbmV3IExpc3RJdGVtKCksCiAgICAgICAgbmV3IEJ1bGxldExpc3QoKSwgLy8g5peg5bqP5YiX6KGoCiAgICAgICAgbmV3IE9yZGVyZWRMaXN0KCksIC8vIOacieW6j+WIl+ihqAogICAgICAgIG5ldyBUb2RvSXRlbSgpLAogICAgICAgIG5ldyBUb2RvTGlzdCgpLAogICAgICAgIG5ldyBGdWxsc2NyZWVuKCksCiAgICAgICAgbmV3IFByZXZpZXcoKSwKICAgICAgICBuZXcgQ29kZUJsb2NrKCksCiAgICAgICAgbmV3IFRleHRDb2xvcigpCiAgICAgIF0sCiAgICAgIGNoYW5uZWxzOiBbXSwKICAgICAgYXJ0aWNsZTogewogICAgICAgIHRpdGxlOiAnJywgLy8g5paH56ug5qCH6aKYCiAgICAgICAgY29udGVudDogYAogICAgICAgICAgICAgICAgPGgxPkhlYWRpbmc8L2gxPgogICAgICAgICAgICAgICAgPHA+VGhpcyBFZGl0b3IgaXMgYXdlc29tZSE8L3A+CiAgICAgICAgICAgICAgYCwgLy8g5paH56ug5YaF5a65CiAgICAgICAgY292ZXIgOiB7IC8vIOaWh+eroOWwgemdogogICAgICAgICAgdHlwZSA6IDAsIC8vIOWwgemdouexu+WeiyAtMTroh6rliqjvvIwwLeaXoOWbvu+8jDEtMeW8oO+8jDMtM+W8oAogICAgICAgICAgaW1hZ2VzOiBbXSAvLyDlsIHpnaLlm77niYfnmoTlnLDlnYAKICAgICAgICB9LAogICAgICAgIGNoYW5uZWxfaWQ6IG51bGwKICAgICAgfSwKICAgICAgYXJ0aWNsZV9pZDogbnVsbCwKICAgICAgZnJvbVJ1bGVzOiB7CiAgICAgICAgdGl0bGU6IFsKICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fovpPlhaXmlofnq6DmoIfpopgnLCB0cmlnZ2VyOiAnYmx1cicgfSwKICAgICAgICAgIHsgbWluOiA1LCBtYXg6IDMwLCBtZXNzYWdlOiAn6ZW/5bqm5ZyoIDUg5YiwIDMwIOS4quWtl+espicsIHRyaWdnZXI6ICdibHVyJyB9CiAgICAgICAgXSwKICAgICAgICBjb250ZW50OiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIHZhbGlkYXRvciAocnVsZSwgdmFsdWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnPHA+PC9wPicpewogICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCfor7fovpPlhaXmlofnq6DlhoXlrrknKSkKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY2FsbGJhY2soKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fovpPlhaXmlofnq6DlhoXlrrknLCB0cmlnZ2VyOiAnYmx1cicgfSwKICAgICAgICBdLAogICAgICAgIGNoYW5uZWxfaWQ6IFsKICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fpgInmi6nmlofnq6DpopHpgZMnfQogICAgICAgIF0KICAgICAgfQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICB9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmxvYWRDaGFubmVscygpCgogICAgLy8g55Sx5LqO5oiR5Lus6K6p5Y+R5biD5ZKM5L+u5pS55L2/55So55qE5pivIOWQjOS4gOS4que7hOS7tgogICAgLy8g5omA5Lul6L+Z6YeM6KaB5Yik5patCiAgICAvLyDlpoLmnpzot6/nlLHlj4LmlbDkuK3mnIkgaWQgIOWImeivt+axguWxleekuuaWh+eroOWGheWuuQogICAgaWYgKHRoaXMuJHJvdXRlLnF1ZXJ5LmlkKSB7CiAgICAgIHRoaXMubG9hZEFydGljbGUoKQogICAgfQogIH0sCiAgbW91bnRlZCgpIHt9LAogIHdhdGNoOiB7CiAgfSwKICBtZXRob2RzOiB7CiAgICBvblB1Ymxpc2goZHJhZnQgPSBmYWxzZSkgewogICAgICB0aGlzLiRyZWZzWydwdWJsaXNoLWZvcm0nXS52YWxpZGF0ZSh2YWxpZCA9PiB7CiAgICAgICAgLy8g6aqM6K+B5aSx6LSl5YGc5q2i5o+Q5Lqk6KGo5Y2VCiAgICAgICAgaWYgKCF2YWxpZCl7CiAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgIH0pCiAgICAgIGlmICh0aGlzLmFydGljbGVfaWQpewogICAgICAgIHVwZGF0ZUFydGljbGUodGhpcy5hcnRpY2xlX2lkLCB0aGlzLmFydGljbGUsIGRyYWZ0KS50aGVuKHJlcyA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpCiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICAgICAgbWVzc2FnZTogYCR7ZHJhZnQgPyAn5a2Y5YWl6I2J56i/JyA6ICflj5HluIMnfeaIkOWKn2AsCiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJwogICAgICAgICAgfSkKICAgICAgICAgIC8vIOi3s+i9rOWIsOWGheWuueeuoeeQhumhtemdogogICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goJy9hcnRpY2xlJykKICAgICAgICB9KQogICAgICB9ZWxzZSB7CiAgICAgICAgLy8g5om+5Yiw5pWw5o2u5o6l5Y+jCiAgICAgICAgYWRkQXJ0aWNsZSh0aGlzLmFydGljbGUsIGRyYWZ0KS50aGVuKHJlcyA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpCiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICAgICAgbWVzc2FnZTogYCR7ZHJhZnQgPyAn5a2Y5YWl6I2J56i/JyA6ICflj5HluIMnfeaIkOWKn2AsCiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJwogICAgICAgICAgfSkKICAgICAgICAgIC8vIOi3s+i9rOWIsOWGheWuueeuoeeQhumhtemdogogICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goJy9hcnRpY2xlJykKICAgICAgICB9KQogICAgICB9CiAgICB9LAogICAgbG9hZENoYW5uZWxzICgpIHsKICAgICAgZ2V0QXJ0aWNsZUNoYW5uZWxzKCkudGhlbihyZXMgPT4gewogICAgICAgIHRoaXMuY2hhbm5lbHMgPSByZXMuZGF0YS5kYXRhLmNoYW5uZWxzCiAgICAgIH0pCiAgICB9LAogICAgbG9hZEFydGljbGUgKCkgewogICAgICAvLyDkv67mlLnmlofnq6Ag5Yqg6L295paH56ug5YaF5a65CiAgICAgIHRoaXMuYXJ0aWNsZV9pZCA9IHRoaXMuJHJvdXRlLnF1ZXJ5LmlkLnRvU3RyaW5nKCkKICAgICAgZ2V0QXJ0aWNsZSh0aGlzLmFydGljbGVfaWQpLnRoZW4ocmVzID0+IHsKICAgICAgICAvL3RoaXMuYXJ0aWNsZSA9IHJlcy5kYXRhLmRhdGEKICAgICAgfSkKICAgIH0sCiAgICBvblVwZGF0ZUNvdmVyKGluZGV4LCB1cmwpIHsKICAgICAgY29uc29sZS5sb2codXJsKQogICAgICB0aGlzLmFydGljbGUuY292ZXIuaW1hZ2VzW2luZGV4XSA9IHVybAogICAgfQogIH0KfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"index.vue","sourceRoot":"src/views/publish","sourcesContent":["<template>\r\n  <div class=\"publish-container\">\r\n    <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <div slot=\"header\" class=\"clearfix\">\r\n          <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n            <el-breadcrumb-item :to=\"{ path: '/' }\">首页</el-breadcrumb-item>\r\n            <el-breadcrumb-item>{{ $route.query.id ? '修改文章': '发布文章'}}</el-breadcrumb-item>\r\n          </el-breadcrumb>\r\n        </div>\r\n      </div>\r\n      <el-form ref=\"publish-form\"\r\n               :rules=\"fromRules\"\r\n               :model=\"article\"\r\n               label-width=\"80px\">\r\n        <el-form-item label=\"标题\" prop=\"title\">\r\n          <el-input v-model=\"article.title\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"内容\" prop=\"content\">\r\n          <!-- <el-input type=\"textarea\" v-model=\"article.content\"></el-input> -->\r\n          <el-tiptap\r\n            v-model=\"article.content\"\r\n            :extensions=\"extensions\"\r\n            lang=\"zh\"\r\n            height=\"350\"\r\n            placeholder=\"请输入文章内容\"\r\n          ></el-tiptap>\r\n        </el-form-item>\r\n        <el-form-item label=\"封面\">\r\n          <el-radio-group v-model=\"article.cover.type\">\r\n            <el-radio :label=\"1\">单图</el-radio>\r\n            <el-radio :label=\"3\">三图</el-radio>\r\n            <el-radio :label=\"0\">无图</el-radio>\r\n            <el-radio :label=\"-1\">自动</el-radio>\r\n          </el-radio-group>\r\n          <template v-if=\"article.cover.type > 0\">\r\n<!--            <upload-cover-->\r\n<!--              v-for=\"(cover,index) in article.cover.type\"-->\r\n<!--              :key=\"cover\"-->\r\n<!--              :cover-image=\"article.cover.images[index]\"-->\r\n<!--              @update-cover = \"onUpdateCover(index, $event)\"-->\r\n<!--            />-->\r\n            <!--\r\n            我们需要把选择的封面图片的地址放到 article.cover.images 数组中\r\n\r\n            当你给事件处理函数传递了自定义参数以后，就无法得到原本的那个数据参数了。\r\n\r\n            如果想要在事件处理函数自定义传参以后还想得到原来的那个事件本身的参数，则手动指定 $event，它就代表那个事件本身的参数\r\n\r\n            在组件上使用 v-model\r\n\r\n            当你给子组件提供的数据既要使用还要修改，这个时候我们可以使用 v-model 简化数据绑定。\r\n            v-model=\"article.cover.images[index]\"\r\n              给子组件传递了一个名字叫 value 的数据\r\n              :value=\"article.cover.images[index]\"\r\n              默认监听 input 事件，当事件发生，它会让绑定数据 = 事件参数\r\n              @input=\"article.cover.images[index] = 事件参数\"\r\n\r\n            注意：v-model 仅仅是简写了而已，本质还在在父子组件通信\r\n\r\n            v-model 的参考文档：https://cn.vuejs.org/v2/guide/components-custom-events.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84-v-model\r\n           -->\r\n            <upload-cover\r\n              :key=\"cover\"\r\n              v-for=\"(cover, index) in article.cover.type\"\r\n              v-model=\"article.cover.images[index]\"\r\n            />\r\n          </template>\r\n        </el-form-item>\r\n        <el-form-item label=\"频道\" prop=\"channel_id\">\r\n          <el-select v-model=\"article.channel_id\" placeholder=\"请选择频道\">\r\n            <el-option\r\n              :label=\"channel.name\"\r\n              :value=\"channel.id\"\r\n              v-for=\"(channel, index) in channels\"\r\n              :key=\"index\"\r\n            ></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"onPublish(false)\">发表</el-button>\r\n          <el-button @click=\"onPublish(true)\">存入草稿</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import UploadCover from './components/upload-cover'\r\n  import { getArticleChannels, addArticle, updateArticle, getArticle } from \"@/api/article\";\r\n  import {\r\n    ElementTiptap,\r\n    Doc,\r\n    Text,\r\n    Paragraph,\r\n    Heading,\r\n    Bold,\r\n    Underline,\r\n    Italic,\r\n    Image,\r\n    Strike,\r\n    ListItem,\r\n    BulletList,\r\n    OrderedList,\r\n    TodoItem,\r\n    TodoList,\r\n    HorizontalRule,\r\n    Fullscreen,\r\n    Preview,\r\n    CodeBlock,\r\n    TextColor\r\n  } from 'element-tiptap'\r\n  import 'element-tiptap/lib/index.css'\r\n  import { uploadImage } from '@/api/image'\r\n  export default {\r\n  name: 'PublishIndex',\r\n  props: {},\r\n  components: {\r\n    'el-tiptap': ElementTiptap,\r\n    UploadCover\r\n  },\r\n  data () {\r\n    return {\r\n      extensions: [\r\n        new Doc(),\r\n        new Text(),\r\n        new Paragraph(),\r\n        new Heading({ level: 3 }),\r\n        new Bold({ bubble: true }), // 在气泡菜单中渲染菜单按钮\r\n        new Image({\r\n          // 默认会把图片生成 base64 字符串和内容存储在一起，如果需要自定义图片上传\r\n          uploadRequest (file) {\r\n            // 如果接口要求 Content-Type 是 multipart/form-data，则请求体必须使用 FormData\r\n            const fd = new FormData()\r\n            fd.append('image', file)\r\n            // 第1个 return 是返回 Promise 对象\r\n            // 为什么？因为 axios 本身就是返回 Promise 对象\r\n            return uploadImage(fd).then(res => {\r\n              // 这个 return 是返回最后的结果\r\n              return res.data.data.url\r\n            })\r\n          } // 图片的上传方法，返回一个 Promise<url>\r\n        }),\r\n        new Underline(), // 下划线\r\n        new Italic(), // 斜体\r\n        new Strike(), // 删除线\r\n        new HorizontalRule(), // 华丽的分割线\r\n        new ListItem(),\r\n        new BulletList(), // 无序列表\r\n        new OrderedList(), // 有序列表\r\n        new TodoItem(),\r\n        new TodoList(),\r\n        new Fullscreen(),\r\n        new Preview(),\r\n        new CodeBlock(),\r\n        new TextColor()\r\n      ],\r\n      channels: [],\r\n      article: {\r\n        title: '', // 文章标题\r\n        content: `\r\n                <h1>Heading</h1>\r\n                <p>This Editor is awesome!</p>\r\n              `, // 文章内容\r\n        cover : { // 文章封面\r\n          type : 0, // 封面类型 -1:自动，0-无图，1-1张，3-3张\r\n          images: [] // 封面图片的地址\r\n        },\r\n        channel_id: null\r\n      },\r\n      article_id: null,\r\n      fromRules: {\r\n        title: [\r\n          { required: true, message: '请输入文章标题', trigger: 'blur' },\r\n          { min: 5, max: 30, message: '长度在 5 到 30 个字符', trigger: 'blur' }\r\n        ],\r\n        content: [\r\n          {\r\n            validator (rule, value, callback) {\r\n              if (value === '<p></p>'){\r\n                callback(new Error('请输入文章内容'))\r\n              } else {\r\n                callback()\r\n              }\r\n            }\r\n          },\r\n          { required: true, message: '请输入文章内容', trigger: 'blur' },\r\n        ],\r\n        channel_id: [\r\n          { required: true, message: '请选择文章频道'}\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n  },\r\n  created() {\r\n    this.loadChannels()\r\n\r\n    // 由于我们让发布和修改使用的是 同一个组件\r\n    // 所以这里要判断\r\n    // 如果路由参数中有 id  则请求展示文章内容\r\n    if (this.$route.query.id) {\r\n      this.loadArticle()\r\n    }\r\n  },\r\n  mounted() {},\r\n  watch: {\r\n  },\r\n  methods: {\r\n    onPublish(draft = false) {\r\n      this.$refs['publish-form'].validate(valid => {\r\n        // 验证失败停止提交表单\r\n        if (!valid){\r\n          return\r\n        }\r\n      })\r\n      if (this.article_id){\r\n        updateArticle(this.article_id, this.article, draft).then(res => {\r\n          console.log(res)\r\n          this.$message({\r\n            message: `${draft ? '存入草稿' : '发布'}成功`,\r\n            type: 'success'\r\n          })\r\n          // 跳转到内容管理页面\r\n          this.$router.push('/article')\r\n        })\r\n      }else {\r\n        // 找到数据接口\r\n        addArticle(this.article, draft).then(res => {\r\n          console.log(res)\r\n          this.$message({\r\n            message: `${draft ? '存入草稿' : '发布'}成功`,\r\n            type: 'success'\r\n          })\r\n          // 跳转到内容管理页面\r\n          this.$router.push('/article')\r\n        })\r\n      }\r\n    },\r\n    loadChannels () {\r\n      getArticleChannels().then(res => {\r\n        this.channels = res.data.data.channels\r\n      })\r\n    },\r\n    loadArticle () {\r\n      // 修改文章 加载文章内容\r\n      this.article_id = this.$route.query.id.toString()\r\n      getArticle(this.article_id).then(res => {\r\n        //this.article = res.data.data\r\n      })\r\n    },\r\n    onUpdateCover(index, url) {\r\n      console.log(url)\r\n      this.article.cover.images[index] = url\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n\r\n</style>\r\n"]}]}