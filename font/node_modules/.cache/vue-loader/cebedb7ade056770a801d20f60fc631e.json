{"remainingRequest":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\src\\views\\publish\\components\\upload-cover.vue?vue&type=style&index=0&id=151bfdcc&scoped=true&lang=less&","dependencies":[{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\src\\views\\publish\\components\\upload-cover.vue","mtime":1607394431726},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\webLearn\\Vue\\黑马头条\\后台\\publish-admin-test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jb3Zlci13cmFwIHsKICB3aWR0aDogMTUwcHg7CiAgaGVpZ2h0OiAxMjBweDsKICBib3JkZXI6IDFweCBzb2xpZCAjMDAwOwogIC5jb3Zlci1pbWFnZSB7CiAgICBoZWlnaHQ6IDEyMHB4OwogICAgbWF4LXdpZHRoOiAxMDAlOwogIH0KfQo="},{"version":3,"sources":["upload-cover.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"upload-cover.vue","sourceRoot":"src/views/publish/components","sourcesContent":["<template>\r\n  <div class=\"upload-cover\" @click=\"showCoverSelect\">\r\n    <div class=\"cover-wrap\">\r\n      <img\r\n        class=\"cover-image\"\r\n        ref=\"cover-image\"\r\n        :src=\"value\"\r\n      >\r\n    </div>\r\n\r\n    <el-dialog\r\n      title=\"选择封面\"\r\n      :visible.sync=\"dialogVisible\"\r\n      append-to-body\r\n    >\r\n      <el-tabs v-model=\"activeName\" type=\"card\">\r\n        <el-tab-pane label=\"素材库\" name=\"first\">\r\n          <image-list\r\n            :is-show-add=\"false\"\r\n            :is-show-action=\"false\"\r\n            is-show-selected\r\n            :foo=\"666\"\r\n            ref=\"image-list\"\r\n          />\r\n        </el-tab-pane>\r\n        <el-tab-pane label=\"上传图片\" name=\"second\">\r\n          <input\r\n            type=\"file\"\r\n            @change=\"onFileChange\"\r\n            ref=\"file\"\r\n          >\r\n          <img\r\n            width=\"100\"\r\n            ref=\"preview-image\"\r\n          >\r\n        </el-tab-pane>\r\n      </el-tabs>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n        <el-button\r\n          type=\"primary\"\r\n          @click=\"onCoverConfirm\"\r\n        >确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import ImageList from '@/views/image/components/image-list'\r\n  import { uploadImage } from '@/api/image'\r\nexport default {\r\n  name: 'UploadCover',\r\n  props: ['value'],\r\n  // props: ['cover-image'],\r\n  components: {\r\n    ImageList\r\n  },\r\n  data () {\r\n    return {\r\n      dialogVisible :false,\r\n      activeName: 'second'\r\n    }\r\n  },\r\n  computed: {\r\n  },\r\n  created() {},\r\n  mounted() {},\r\n  watch: {\r\n  },\r\n  methods: {\r\n    showCoverSelect() {\r\n      this.dialogVisible = true\r\n    },\r\n    onFileChange() {\r\n      // 获取文件对象\r\n      const file = this.$refs.file.files[0]\r\n      const blob = window.URL.createObjectURL(file)\r\n      this.$refs['preview-image'].src = blob\r\n      //防止 用户选择同一个文件不触发change事件\r\n      //this.$refs.file.value = ''\r\n    },\r\n    onCoverConfirm() {\r\n      // 如果 tab 是上传图片，并且 input-file 有选择的文件，才执行上传图片的操作\r\n      if (this.activeName === 'second') {\r\n        const file = this.$refs.file.files[0]\r\n        if (!file) {\r\n          this.$message('请选择文件')\r\n          return\r\n        }\r\n        // 执行上传文件的操作\r\n        const fd = new FormData()\r\n        fd.append('image', file)\r\n\r\n        uploadImage(fd).then(res => {\r\n          // 关闭弹出层\r\n          this.dialogVisible = false\r\n          // 展示上传的图片\r\n          this.$refs['cover-image'].src = res.data.data.url\r\n\r\n          // 将图片地址发送给父组件\r\n          //this.$emit('update-cover', res.data.data.url)\r\n          this.$emit('input', res.data.data.url)\r\n          // this.$emit('update-cover', res.data.data.url)\r\n        })\r\n      }else if (this.activeName === 'first'){\r\n        // 还有一种组件通信方式：父组件可以直接访问子组件中的数据\r\n        const imageList = this.$refs['image-list']\r\n        const selected = imageList.selected\r\n        if (selected === null) {\r\n          this.$message('请选择封面图片')\r\n          return\r\n        }\r\n\r\n        // 关闭对话框\r\n        this.dialogVisible = false\r\n        // 修改父组件绑定数据\r\n        this.$emit('input', imageList.images[selected].url)\r\n      }\r\n    }\r\n  },\r\n  filters: {\r\n    fnName: function (value) {\r\n      return value\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  .cover-wrap {\r\n    width: 150px;\r\n    height: 120px;\r\n    border: 1px solid #000;\r\n    .cover-image {\r\n      height: 120px;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n</style>\r\n"]}]}